/**
 * @typedef {Object} EleventyUserConfig
 * @property {EleventyLogger} logger
 * @property {Set<string>} ignores
 * @property {(p: string) => void} setOutputDirectory
 * @property {(r: Record<string, string>) => void} addPassthroughCopy
 * @property {(n: string, cb: (c: any) => Promise<void>) => void} on
 * @property {(p: string) => void} addWatchTarget
 * @property {(n: string, t: () => unknown) => void} addGlobalData
 * @property {(n: string, t: (c: any, f: string) => Promise<string>) => void} addTransform
 * @property {(n: string, t: (c: EleventyContext) => Promise<string>) => void} addTemplate
 */

/**
 * @typedef {Object} EleventyLogger
 * @property {(m: string) => void} error
 */

/**
 * @typedef {Object} EleventyTemplate
 * @property {string} path
 * @property {(c: EleventyContext) => Promise<string>} render
 */

/**
 * @typedef {any} EleventyContext
 */

/**
 * @typedef {any} EleventyData
 */

import {rm} from "node:fs/promises"
import {tmpdir} from "node:os"
import browserslist from "browserslist"
import * as esbuild from "esbuild"
import * as terser from "html-minifier-terser"
import * as lightning from "lightningcss"
import * as example from "./example.js"
import * as stat from "./stat.js"
import * as template from "./template.js"

/**
 * @param {EleventyUserConfig} uc
 * @returns {unknown}
 */
export default function (uc) {
  uc.ignores.add("**")
  uc.addPassthroughCopy({"static": "."})

  uc.on("eleventy.before", async (c) => {
    await rm(c.dir.output, {recursive: true, force: true})
  })

  uc.addWatchTarget("client.css")
  uc.addGlobalData("css", async () => {
    try {
      let l = browserslist("> 0.2% and not dead")
      let t = lightning.browserslistToTargets(l)
      let r = await lightning.bundleAsync({
        drafts: {
          customMedia: true,
        },
        filename: "client.css",
        minify: true,
        targets: t,
      })
      return String(r.code)
    } catch (/** @type {any} */ e) {
      uc.logger.error(e.message)
      return ""
    }
  })

  uc.addWatchTarget("client.js")
  uc.addGlobalData("js", async () => {
    try {
      let r = await esbuild.build({
        bundle: true,
        entryPoints: ["client.js"],
        minify: true,
        outdir: tmpdir(),
        write: false,
      })
      let b = Buffer.from(r.outputFiles[0].contents)
      return b.toString()
    } catch (/** @type {any} */ e) {
      uc.logger.error(e.message)
      return ""
    }
  })

  uc.addGlobalData("examples", example.list)
  uc.addGlobalData("stars", stat.stars)
  uc.addGlobalData("installs", stat.installs)

  uc.addTransform("terser", async (c, f) => {
    try {
      if (!f.endsWith(".html")) {
        return c
      }
      return terser.minify(c, {
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeAttributeQuotes: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        sortAttributes: true,
      })
    } catch (/** @type {any} */ e) {
      uc.logger.error(e.message)
      return c
    }
  })

  for (let t of template.list()) {
    uc.addTemplate(t.path, t.render)
  }

  return {
    dir: {
      // todo: replace with uc.setOutputDirectory("dist")
      output: "dist",
    },
  }
}
